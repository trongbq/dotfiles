#+title:  Emacs Configuration
#+author: Trong Bui

* Package manager
** Set up ~straight.el~
Use ~straight.el~ for package manager, as a replacement for ~package.el~.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Integrate with ~use-package~
#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src

* UI
** General
#+begin_src emacs-lisp
(setq-default cursor-type 'bar)
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
(global-linum-mode 1)
(setq-default word-wrap t)
(add-to-list 'default-frame-alist '(font . "Consolas-16"))
(add-to-list 'default-frame-alist '(height . 24))
(add-to-list 'default-frame-alist '(width . 80))
#+end_src
** Line column
#+begin_src emacs-lisp
(setq-default fill-column 120)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Theme
#+begin_src emacs-lisp
;;(use-package gruvbox-theme
;;  :config (load-theme 'gruvbox t))
;;(use-package dracula-theme
;;  :config (load-theme 'dracula t)
;;  (set-face-background 'mode-line "#510370")
;;  (set-face-background 'mode-line-inactive "#212020"))
;;(custom-set-faces
;; '(mode-line ((t (:background "#510370" :foreground "#EEEEEE")))))
(use-package spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-light t))
;;(load-theme 'adwaita)
#+end_src
** Mode line
#+begin_src emacs-lisp
(setq-default mode-line-format '("%e"
                                 mode-line-front-space
                                 " "
                                 mode-line-modified
                                 " "
                                 "%[" mode-line-buffer-identification "%]"
                                 "   "
                                 "L%l"
                                 "  "
                                 mode-line-modes
                                 mode-line-misc-info
                                 projectile-mode-line
                                 " "
                                 (:propertize " " display ((space :align-to (- right 34))))
                                 (vc-mode vc-mode)
                                 mode-line-end-spaces))
#+end_src
** Highlight current line
#+begin_src emacs-lisp
;;(when window-system
;;  (global-hl-line-mode))
#+end_src
* General configuration
#+begin_src emacs-lisp
(setq auto-save-default nil)
#+end_src
** Read ~$PATH~
Useful for ~elpy~ package to load ~python3~ executable from ~$PATH~
#+begin_src emacs-lisp
(use-package exec-path-from-shell :ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src
** Windows switching
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+end_src
** Highlight brackets
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
** Smooth scrolling
#+begin_src emacs-lisp
;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src
** File format
*** Add a newline at the end
#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src
*** Delete trailing whitespace
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
*** Tab and indentation
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq tab-width 4)
#+end_src
** Presentation view
#+begin_src emacs-lisp
(defun toggle-presentation ()
  "Toggle presentation features, like font increase."
  (interactive)
  (let ((regular-fontsize 140)
        (presentation-fontsize 240))
    (if (equal (face-attribute 'default :height) regular-fontsize)
        (set-face-attribute 'default nil :height presentation-fontsize)
      (set-face-attribute 'default nil :height regular-fontsize))))
#+end_src
** Org Mode
*** Display image inline
#+begin_src emacs-lisp
(setq org-startup-with-inline-images nil)
(setq org-image-actual-width nil)
#+end_src
*** Todo
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "INPG" "|" "COMP")))
(setq org-todo-keyword-faces
      '(("TODO"    . "grey")
        ("INPG"   . "#fdcb6e")
        ("COMP"    . "green")))
(setq org-log-done 'note)
#+end_src
*** Visual
#+begin_src emacs-lisp
(setq org-time-stamp-custom-formats '("<%a %D>" . "<%a %b %e %Y %H:%M>"))

(with-eval-after-load 'org
  (setq org-startup-indented t) ; Enable `org-indent-mode' by default
  (add-hook 'org-mode-hook #'visual-line-mode))
#+end_src
*** Hide the emphasis markup
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src
*** A font-lock substitution for list markers
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
#+end_src
*** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :config
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
*** Deft
#+begin_src emacs-lisp
(use-package deft
  :ensure t
  :config
  (setq deft-directory "~/Dropbox/datacenter"
        deft-recursive t
        deft-default-extension "org"
        deft-text-mode 'org-mode
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t)
  (global-set-key (kbd "C-c d") 'deft))
#+end_src
*** Custom font
#+begin_src emacs-lisp
  (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+end_src
*** variable-pitch-mode
#+begin_src emacs-lisp
 (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
   '(fixed-pitch ((t ( :family "Consolas"  :height 160)))))
(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src
*** Config faces for specific Org elements
#+begin_src emacs-lisp
(custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src
*** Config folding style
#+begin_src emacs-lisp
(setq org-ellipsis "‚ñæ")
#+end_src
* Programing
** Project management
#+begin_src emacs-lisp
(use-package project)
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase nil)
  (bind-keys :map company-active-map
             ("C-d" . company-show-doc-buffer)
             ("C-l" . company-show-location)
             ("C-n" . company-select-next)
             ("C-p" . company-select-previous)
             ("C-t" . company-select-next)
             ("C-s" . company-select-previous)
             ("TAB" . company-complete)))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :config (flycheck-mode 1)
  (add-hook 'emacs-lisp-mode-hook 'flycheck-mode)
  (add-hook 'json-mode-hook 'flycheck-mode))
#+end_src
** Commenting
#+begin_src emacs-lisp
(global-set-key (kbd "C-;") #'comment-or-uncomment-region)
#+end_src
** Highlight indentation
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :init
  (setq highlight-indent-guides-method 'column)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src
** Smart parens
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :init (smartparens-global-mode 1)
  :diminish smartparens-mode)
#+end_src
** Languages
*** Python
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (setq elpy-rpc-python-command "python3")
  (advice-add 'python-mode :before 'elpy-enable)
  (add-hook 'python-mode-hook 'flycheck-mode))
#+end_src
*** Go
#+begin_src emacs-lisp
(use-package go-mode
  :config
  (add-hook 'before-save-hook #'gofmt-before-save)
  (add-hook 'go-mode-hook 'flycheck-mode)
  (setq go-packages-function 'go-packages-go-list)
  :bind
  (:map go-mode-map ("M-." . godef-jump)))
#+end_src
**** Company integration
#+begin_src
(use-package company-go
  :config
  (add-hook 'go-mode-hook 'company-mode)
  (add-to-list 'company-backends 'company-go))
#+end_src
